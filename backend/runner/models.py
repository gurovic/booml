from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import pre_save, post_save
from django.dispatch import receiver
from .tasks import enqueue_submission_for_evaluation


class Submission(models.Model):
    STATUS_PENDING = "pending"
    STATUS_RUNNING = "running"
    STATUS_ACCEPTED = "accepted"
    STATUS_FAILED = "failed"
    STATUS_VALIDATED = "validated"
    STATUS_CHOICES = [
        ("pending", "‚è≥ –í –æ—á–µ—Ä–µ–¥–∏"),
        ("running", "üèÉ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"),
        ("accepted", "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"),
        ("failed", "‚ùå –û—à–∏–±–∫–∞"),
        ("validated", "‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ")
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="submissions")
    problem = models.ForeignKey("Problem", on_delete=models.CASCADE, related_name="submissions")
    file = models.FileField(upload_to="submissions/")
    submitted_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="pending")
    code_size = models.PositiveIntegerField(default=0)
    metrics = models.JSONField(null=True, blank=True)  # {"accuracy": 0.87, "f1": 0.65}

    def save(self, *args, **kwargs):
        if self.file and not self.code_size:
            try:
                self.code_size = self.file.size
            except Exception:
                self.code_size = 0
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.user.username} - {self.problem} ({self.score})"


@receiver(pre_save, sender=Submission)
def submission_pre_save(sender, instance, **kwargs):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ instance._previous_status.
    –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤ post_save –ø–æ–Ω—è—Ç—å, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å.
    """
    if not instance.pk:
        instance._previous_status = None
    else:
        try:
            prev = Submission.objects.get(pk=instance.pk)
            instance._previous_status = prev.status
        except Submission.DoesNotExist:
            instance._previous_status = None


@receiver(post_save, sender=Submission)
def submission_post_save(sender, instance, created, **kwargs):
    """
    –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª 'validated' (–∏ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª 'validated'),
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –≤ 'pending' (–≤ –æ—á–µ—Ä–µ–¥—å) –∏ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ Celery.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º QuerySet.update(...) —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ save()/—Å–∏–≥–Ω–∞–ª—ã.
    """
    prev_status = getattr(instance, "_previous_status", None)

    # —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ 'validated' (–∏ –Ω–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
    if not created and instance.status == Submission.STATUS_VALIDATED and prev_status != Submission.STATUS_VALIDATED:
        # —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ë–î (–Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–æ–∫)
        current_db_status = Submission.objects.filter(pk=instance.pk).values_list("status", flat=True).first()

        # –µ—Å–ª–∏ –≤ –ë–î —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏/–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è/–ø—Ä–∏–Ω—è—Ç–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current_db_status in (Submission.STATUS_PENDING, Submission.STATUS_RUNNING, Submission.STATUS_ACCEPTED):
            return

        # –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–±–µ–∑ –≤—ã–∑–æ–≤–∞ .save –∏ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤)
        updated_count = Submission.objects.filter(pk=instance.pk, status=instance.status).update(
            status=Submission.STATUS_PENDING)

        # –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ (== 1), —Å—Ç–∞–≤–∏–º —Ç–∞—Å–∫ –≤ –æ—á–µ—Ä–µ–¥—å
        if updated_count:
            enqueue_submission_for_evaluation.delay(instance.pk)


from django.db import models

# Create your models here.
